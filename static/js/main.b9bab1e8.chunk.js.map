{"version":3,"sources":["components/cameraHandler/CameraHandler.js","app-code-context.js","components/scannerPrototype/scannerPrototype.js","App.js","serviceWorker.js","index.js"],"names":["Video","lazy","CameraHandler","useState","isCameraSupported","setCameraSupported","useEffect","navigator","mediaDevices","getUserMedia","console","log","fallback","className","role","aria-label","AppCodeContext","React","createContext","code","type","setCode","data","setType","value","TabPane","Tabs","ScannerPrototype","activeTabKey","setActiveTabKey","setCodeData","setTypeData","Provider","defaultActiveKey","onChange","activeKey","tab","BarcodeOutlined","key","Header","Layout","Content","Footer","Sider","App","style","height","breakpoint","collapsedWidth","onBreakpoint","broken","onCollapse","collapsed","textAlign","margin","align","src","alt","theme","mode","defaultSelectedKeys","Item","icon","VideoCameraOutlined","padding","minHeight","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b9bab1e8.chunk.js","sourcesContent":["import React, { lazy, Suspense, useState, useEffect } from \"react\";\r\nimport \"./cameraHandler.css\";\r\n\r\nconst Video = lazy(() => import(\"../Video\"))\r\n\r\nconst CameraHandler = () => {\r\n  const [isCameraSupported, setCameraSupported] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      setCameraSupported(true);\r\n    }\r\n    console.log(\"did mounted\");\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {isCameraSupported ? (\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n\t\t  <Video />\r\n        </Suspense>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {!isCameraSupported ? (\r\n        <div className=\"cameraHandler__unsopported\">\r\n          <div>\r\n            <p>\r\n              Your device does not support/enabled camera access or something\r\n              went wrong{\" \"}\r\n              <span role=\"img\" aria-label=\"thinking-face\">\r\n                ðŸ¤”\r\n              </span>\r\n            </p>\r\n            <p>You can enter the barcode below</p>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CameraHandler;\r\n","import React from \"react\";\r\n\r\nexport const AppCodeContext = React.createContext({\r\n  code: \"\",\r\n  type: \"\",\r\n  setCode: (data) => {},\r\n  setType: (value) => {},\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport CameraHandler from \"../cameraHandler/CameraHandler\";\r\n\r\nimport { AppCodeContext } from \"../../app-code-context\";\r\nimport { BarcodeOutlined } from \"@ant-design/icons\";\r\nconst { TabPane } = Tabs;\r\n\r\nconst ScannerPrototype = () => {\r\n  const [activeTabKey, setActiveTabKey] = useState(1);\r\n  const [code, setCodeData] = useState(\"\");\r\n  const [type, setTypeData] = useState(\"\");\r\n  const setCode = (value) => {\r\n    setCodeData(value);\r\n  };\r\n  const setType = (value) => {\r\n    setTypeData(value);\r\n  };\r\n\r\n  const onTabChange = (activeKey) => {\r\n    console.log(activeKey);\r\n    setActiveTabKey(+activeKey);\r\n  };\r\n  return (\r\n    <AppCodeContext.Provider value={{ code, setCode, type, setType }}>\r\n      <div className=\"card-container\">\r\n        <Tabs type=\"card\" defaultActiveKey=\"1\" onChange={onTabChange}>\r\n          <TabPane\r\n            tab={\r\n              <span>\r\n                <BarcodeOutlined />\r\n                Barcode/Qrcode Scanner\r\n              </span>\r\n            }\r\n            key=\"1\"\r\n          >\r\n            {activeTabKey === 1 ? <CameraHandler /> : null}\r\n          </TabPane>\r\n\r\n        </Tabs>\r\n      </div>\r\n    </AppCodeContext.Provider>\r\n  );\r\n};\r\nexport default ScannerPrototype;\r\n","import React from \"react\";\r\nimport { Space, Layout, Menu } from \"antd\";\r\nimport \"./App.less\";\r\nimport {\r\n  VideoCameraOutlined,\r\n} from \"@ant-design/icons\";\r\nimport ScannerPrototype from \"./components/scannerPrototype/scannerPrototype\";\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Layout style={{ height: \"100vh\" }}>\r\n        <Sider\r\n          breakpoint=\"lg\"\r\n          collapsedWidth=\"0\"\r\n          onBreakpoint={(broken) => {\r\n            console.log(broken);\r\n          }}\r\n          onCollapse={(collapsed, type) => {\r\n            console.log(collapsed, type);\r\n          }}\r\n        >\r\n          <section style={{ textAlign: \"center\", margin: 16 }}>\r\n            <Space align=\"start\">\r\n              <img\r\n                style={{height: 36}}\r\n                src=\"https://www.centralgroup.com/themes/default/assets/static/images/logo/logo-white-gray.svg\"\r\n                alt=\"Centra Group\"\r\n              />\r\n            \r\n            </Space>\r\n          </section>\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n            <Menu.Item key=\"1\" icon={<VideoCameraOutlined />}>\r\n              Scan\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Sider>\r\n        <Layout>\r\n          <Header\r\n            className=\"site-layout-sub-header-background\"\r\n            style={{ padding: 0 }}\r\n          />\r\n\r\n          <Content style={{ margin: \"0px 16px 0\" }}>\r\n            <div\r\n              className=\"site-layout-background\"\r\n              style={{ padding: 24, minHeight: 360 }}\r\n            >\r\n              <ScannerPrototype></ScannerPrototype>\r\n            </div>\r\n          </Content>\r\n          <Footer style={{ textAlign: \"center\" }}>\r\n          </Footer>\r\n        </Layout>\r\n      </Layout>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/Video/Video.js","components/Video/index.js"],"names":["Video","useState","errorMessage","setErrorMessage","recording","setRecording","hints","Map","set","zxing","TRY_HARDER","reader","stopStreamedVideo","videoElem","document","getElementById","srcObject","getTracks","forEach","track","stop","className","type","id","htmlType","onClick","e","Promise","resolve","reject","setTimeout","stopAsyncDecode","decodeOnceFromVideoDevice","then","catch","result","alert","getText","err","console","log","message","error","style","marginTop","preventDefault"],"mappings":"mOA6GeA,G,OAxGD,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACXC,EADW,KACGC,EADH,OAEgBF,oBAAS,GAFzB,mBAEXG,EAFW,KAEAC,EAFA,KAGZC,EAAQ,IAAIC,IAClBD,EAAME,IAAIC,iBAAqBC,YAAY,GAC3C,IAAMC,EAAS,IAAIF,2BAA+BH,EAAO,KA8CzD,SAASM,IACP,IAAMC,EAAiBC,SAASC,eAAe,UAC/CV,GAAa,GAETQ,GAAaA,EAAUG,aACZH,EAAUG,UACHC,YAEbC,SAAQ,SAACC,GACdA,EAAMC,UAGRP,EAAUG,UAAY,MAI1B,OACI,yBAAKK,UAAU,mBACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,OAAOnB,GACtB,yBAAKmB,UAAU,QACXjB,GACE,kBAAC,IAAD,CACIkB,KAAK,UACLC,GAAG,WACHC,SAAS,SACTC,QAAS,SAAAC,GAAC,OArE1BrB,GAAa,QACF,IAAIsB,SAAQ,SAACC,EAASC,GAC/BC,YAAW,WACTnB,EAAOoB,oBACN,MAEHpB,EACKqB,0BAA0B,KAAMlB,SAASC,eACtC,UAEHkB,KAAKL,GACLM,MAAML,MAIRI,MAAK,SAACE,GACLC,MAAMD,EAAOE,WACbzB,OAEDsB,OAAM,SAAAI,GACLC,QAAQC,IAAIF,EAAIG,SAGZ,8DADAH,EAAIG,SAGNtC,EACI,6DAGNS,OAGHsB,OAAM,SAAAQ,GACPH,QAAQC,IAAIE,OAqCEC,MAAO,CAAEC,UAAW,KALxB,aAWHxC,GACG,kBAAC,IAAD,CACIkB,KAAK,UACLC,GAAG,UACHC,SAAS,SACTC,QAAS,SAAAC,GAAC,OA5Cf,SAACA,GACZA,EAAEmB,iBACFlC,EAAOoB,kBACPnB,IAyC8BQ,CAAKM,IACnBiB,MAAO,CAAEC,UAAW,KALxB,kBAWN,yBAAKvB,UAAU,SACb,2BAAOE,GAAG,eCpGPvB","file":"static/js/4.ceab42d6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport * as zxing from \"@zxing/library\";\r\nimport { Button } from \"antd\";\r\nimport \"./video.css\";\r\n\r\nconst Video = () => {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [recording, setRecording] = useState(false);\r\n  const hints = new Map();\r\n  hints.set(zxing.DecodeHintType.TRY_HARDER, true);\r\n  const reader = new zxing.BrowserMultiFormatReader(hints, 1000);\r\n\r\n  const start = (e) => {\r\n    setRecording(true);\r\n    const p1 = new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        reader.stopAsyncDecode();\r\n      }, 160000 * 1);\r\n\r\n      reader\r\n          .decodeOnceFromVideoDevice(null, document.getElementById(\r\n              \"video\"\r\n          ))\r\n          .then(resolve)\r\n          .catch(reject);\r\n\r\n\r\n    })\r\n        .then((result: zxing.Result) => {\r\n          alert(result.getText());\r\n          stopStreamedVideo();\r\n        })\r\n        .catch(err => {\r\n          console.log(err.message);\r\n          if (\r\n              err.message !==\r\n              \"Video stream has ended before any code could be detected.\"\r\n          ) {\r\n            setErrorMessage(\r\n                \"Video stream has ended before any code could be detected.\"\r\n            );\r\n          }\r\n          stopStreamedVideo();\r\n        });\r\n\r\n    p1.catch(error => {\r\n      console.log(error);\r\n    });\r\n  };\r\n\r\n  const stop = (e) => {\r\n    e.preventDefault();\r\n    reader.stopAsyncDecode();\r\n    stopStreamedVideo();\r\n  };\r\n\r\n  function stopStreamedVideo() {\r\n    const videoElem: any = document.getElementById(\"video\");\r\n    setRecording(false);\r\n\r\n    if (videoElem && videoElem.srcObject) {\r\n      let stream = videoElem.srcObject;\r\n      let tracks = stream.getTracks();\r\n\r\n      tracks.forEach((track: MediaStreamTrack) => {\r\n        track.stop();\r\n      });\r\n\r\n      videoElem.srcObject = null;\r\n    }\r\n  }\r\n\r\n  return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"w-100 row align-items-center\">\r\n          <div className=\"row\">{errorMessage}</div>\r\n          <div className=\"row\">\r\n            {!recording && (\r\n                <Button\r\n                    type=\"primary\"\r\n                    id=\"btnStart\"\r\n                    htmlType=\"submit\"\r\n                    onClick={e => start(e)}\r\n                    style={{ marginTop: 10 }}\r\n                >\r\n                  Scan Code\r\n                </Button>\r\n            )}\r\n\r\n            {recording && (\r\n                <Button\r\n                    type=\"primary\"\r\n                    id=\"btnStop\"\r\n                    htmlType=\"submit\"\r\n                    onClick={e => stop(e)}\r\n                    style={{ marginTop: 10 }}\r\n                >\r\n                  Stop scanning\r\n                </Button>\r\n            )}\r\n          </div>\r\n          <div className=\"video\">\r\n            <video id=\"video\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Video;\r\n","import Video from './Video';\r\n\r\nexport default Video;\r\n"],"sourceRoot":""}